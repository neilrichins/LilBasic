ÄÄ´ lilbasic.asm  ÃÄÄÄÄÄÄ´ 4/4/98 11:56AM ÃÄÄÄÄÄÄÄþDT=612654866þPATH=E:\Neil's Stuff\8051\MLASM51\lilBasic\
ADD_16	LABEL	ADD_16:	MOV	A,@R1		;Add low-order bytes.
ADR_ER	LABEL	ADR_ER:	JMP	EXP_ER
AES	LABEL	AES:	DS	AESLEN		;Buffer allocation.
AESLEN	EQU	AESLEN	EQU	36		;AES Length.
AESP	LABEL	AESP:	DS	1		;AES Stack Pointer
AES_ER	LABEL	AES_ER:	CALL	STROUT		;Output error message.
ALPHAB	LABEL	ALPHAB:	CALL	SAVE_PNTR	;In case variable name not found.
APND_1	LABEL	APND_1:	XCH	A,TOS_L		;Save nibble to be appended.
APND_2	LABEL	APND_2:	CLR	C
APND_4	LABEL	APND_4:	ADD	A,#10		;Value of lowest hex digit.
APN_ER	LABEL	APN_ER:	CALL	EXP_ER		;Indicate illegal entry.
APPEND	LABEL	APPEND:	JB	H_FLG,APND_2	;Nothing allowed after trailing 'H' received.
AR_EXP	LABEL	AR_EXP: ICALL_  TERM
ASCTBL:	DB	ASCTBL:	DB	'0123456789ABCDEF'
BASCMD	LABEL	BASCMD:                                 ;Token Basic Commands.
BAUDID	LABEL	BAUDID:	DJNZ	R0,$
BEL	EQU	BEL	EQU	07H		;  "    "    "  <BELL>.
CHAR	EQU	CHAR	EQU	R4		;BASIC source string character being parsed.
CMD_NG	LABEL	CMD_NG:	JMP	SYN_ER
CMPR	LABEL	CMPR:
CMPR_1	LABEL	CMPR_1:	JC	CMPR_2		;Jump ahead if VAR_1 < VAR_2.
CMPR_2	LABEL	CMPR_2:	MOV	C,B.2		;Load VAR_1 < VAR_2 test flag.
CMPR_4	LABEL	CMPR_4:	SUBB	A,TOS_H
CNTRET	LABEL	CNTRET:	RET
CNTRL	LABEL	CNTRL:	JNB	RI,CNTRET	;Poll whether character has been typed.
CNTR_2	LABEL	CNTR_2:	CALL	C_IN		;If so, hang up...
COND	LABEL	COND:	CALL	POP_TOS
COND_	MACRO	COND_   MACRO   LBL
CONT	LABEL	CONT:	CALL	STROUT
CONT_1	LABEL	CONT_1: CALL    GETLN                   ;Receive interactive command line.
COUT_1	LABEL	COUT_1:	RET
COUT_2	LABEL	COUT_2:	CLR	C
COUT_3	LABEL	COUT_3:	MOV	TABCNT,#TABSIZ	;Reload field counter.
CR	EQU	CR	EQU	0DH		;ASCII CODE FOR <CARRIAGE RETURN>.
CREATE	LABEL	CREATE:	ADD	A,#-'0'		;Correct for ASCII digit offset.
CREA_1	LABEL	CREA_1:	RET
CURS_H	LABEL	CURS_H:	DS	1
CURS_L	LABEL	CURS_L:	DS	1
C_IN	LABEL	C_IN:
C_IN_1	LABEL	C_IN_1:	RET			;Return to calling routine.
C_IN_2	LABEL	C_IN_2:	CJNE	A,#'a',$+3	;Check for lower-case alphabetics.
C_OUT	LABEL	C_OUT:
C_SAVE	LABEL	C_SAVE:	DS	1		;CHAR saved during SAVE_PNTR.
DD001	LABEL	DD001:  MOV     P2,#HIGH(EXTRAM)
DD002	LABEL	DD002:  MOV     P2,#HIGH(EXTRAM)
DD003	LABEL	DD003:  MOV     P2,PNTR_H               ;Select variable storage page.
DD004	LABEL	DD004:  MOV     P2,DEST_H
DD005	LABEL	DD005:  JNB     RI,$            ;Wait until character received.
DD006	LABEL	DD006:  JNB     TI,$            ;Wait until transmission completed.
DD007	LABEL	DD007:  CLR     TI              ;Clear interrupt flag.
DD008	LABEL	DD008:  JNB     TI,$
DD009	LABEL	DD009:  CLR     TI
DD010	LABEL	DD010:  MOV     P2,#HIGH(EXTRAM);Select first External RAM page.
DD012	LABEL	DD012:  JMP     1003H           ;External interrupt 0 service routine.
DD014	LABEL	DD014:  JMP     100BH           ;Timer 0 service routine.
DD016	LABEL	DD016:  JMP     1013H           ;External interrupt 1 service routine.
DD018	LABEL	DD018:  JMP     101BH           ;Timer 1 service routine.
DD020	LABEL	DD020:  JMP     1023H           ;Serial port interrupt service routine.
DEST_H	EQU	DEST_H	EQU	R3
DEST_L	EQU	DEST_L	EQU	R1		;Destination pointer for line insertion.
DIV_1	LABEL	DIV_1:	MOV	@R1,TMP2
DIV_2	LABEL	DIV_2:	CALL	NEG_IF_NEG
DIV_LP	LABEL	DIV_LP:	MOV	A,TMP2
DIV_NG	LABEL	DIV_NG:	AJMP	EXP_OV		;Report expression overflow.
DIV_RP	LABEL	DIV_RP:	MOV	A,TMP0
DONE	LABEL	DONE:	CALL	READ_CHAR
DONE_1	LABEL	DONE_1:	CJNE	CHAR,#CR,DONE_2	;Any non-colon, non-CR characters are illegal.
DONE_2	LABEL	DONE_2:	SETB	CHAR_FLG
DUPL	LABEL	DUPL:
D_BLNK	LABEL	D_BLNK:
E0	LABEL	E0:     ICALL_  RELOP
E5	LABEL	E5:     RET
ERRENT	LABEL	ERRENT:	CLR	RUNMOD
ERROUT	LABEL	ERROUT:
EXPR	LABEL	EXPR:   ICALL_  AR_EXP
EXP_ER	LABEL	EXP_ER:	CALL	STROUT		;Output error message.
EXP_OV	LABEL	EXP_OV:	CALL	EXP_ER
EXTINI	LABEL	EXTINI:	SETB	EXTVAR
EXTRAM	EQU	EXTRAM	EQU	2034H		;External program buffer begins after 26 vars.
FETBDN	LABEL	FETBDN:	MOV	TOS_H,#00H	;FETCH sequence for Bytes Done.
FETCBY	LABEL	FETCBY:	MOV	DPH,TOS_H
FETCH	LABEL	FETCH:
FETDBY	LABEL	FETDBY:	MOV	A,TOS_L
FETDIR	LABEL	FETDIR:
FETERR	LABEL	FETERR:	JMP	ADR_ER
FETEXT	LABEL	FETEXT:	MOV	R1,A		;Index to variable storage array.
FETJTB:	DB	FETJTB:	DB	FETVAR-FETJTB
FETRBI	LABEL	FETRBI:	CALL	SPLIT_DBA
FETSFR	LABEL	FETSFR:	CALL	SFR_ID
FETVAR	LABEL	FETVAR:	MOV	A,TOS_L
FETXBY	LABEL	FETXBY:	MOV	P2,TOS_H
FET_0	LABEL	FET_0:	CALL	POP_TOS
FET_1	LABEL	FET_1:	MOV	DPTR,#FETJTB
FIN	LABEL	FIN:	CLR	RUNMOD
FLAGS	LABEL	FLAGS:	DS	1		;Interroutine communication flags.
FNDDON	LABEL	FNDDON:	JMP	LOAD_PNTR
FNDLBL	LABEL	FNDLBL:
FND_1	LABEL	FND_1:	CALL	SAVE_PNTR	;Store position of beginning of line.
FORDON	LABEL	FORDON:	CALL	POP_TOS
FOR_ER	LABEL	FOR_ER: IJMP_   CMD_NG
GETLN	LABEL	GETLN:
GETL_0	LABEL	GETL_0:	MOV	R0,TMP0		;Point to beginning of line buffer.
GETL_1	LABEL	GETL_1:	CALL	C_IN		;Get next character from console.
GETL_2	LABEL	GETL_2:	MOV	@R0,A		;Store into line buffer.
GETL_3	LABEL	GETL_3:	CJNE	R0,#AES+AESLEN-1,GETL_2	;Test if buffer full.
GETL_4	LABEL	GETL_4:	CALL	STROUT
GETL_5	LABEL	GETL_5:	CJNE	A,#18H,GETL_7	;Cancel whole line on <CNTRL-X>.
GETL_6	LABEL	GETL_6:	MOV	A,R0		;Check if re-write done.
GETL_7	LABEL	GETL_7: CJNE    A,#08H,GETL_3
GETROM	LABEL	GETROM:	MOV	A,PNTR_L
GET_BUF	LABEL	GET_BUF:
GET_C	LABEL	GET_C:
HOP_	MACRO	HOP_    MACRO   LBL
IABS	LABEL	IABS:
IADD	LABEL	IADD:
IAND	LABEL	IAND:
ICALL_	MACRO	ICALL_  MACRO   LBL
ICPL	LABEL	ICPL:
IDIV	LABEL	IDIV:
IDIV_0	LABEL	IDIV_0:	SETB	SGN_FLG		;Initialize sign monitor flag.
IFDN_1	LABEL	IFDN_1:	CJNE	CHAR,#CR,IFDN_2	;Any non-colon, non-CR characters are illegal.
IFDN_2	LABEL	IFDN_2:	SETB	CHAR_FLG
IFDONE	LABEL	IFDONE:	CALL	READ_CHAR
IFDONE_	MACRO	IFDONE_ MACRO   LBL
IINC	LABEL	IINC:
IINC_1	LABEL	IINC_1:	RET
IJMP_	MACRO	IJMP_   MACRO   LBL
IMOD	LABEL	IMOD:	SETB	MOD_FLG		;Indicate modulo entry point.
IMUL	LABEL	IMUL:
IMUL_1	LABEL	IMUL_1:	DEC	R1		;Index low-order NOS.
IMUL_2	LABEL	IMUL_2:	INC	R1
IMUL_3	LABEL	IMUL_3:	ADD	A,@R1
INDEX	LABEL	INDEX:	CALL	VAR
INDTBL	LABEL	INDTBL:	MOV	A,80H
INIT	LABEL	INIT:	CALL	RAM_INIT
INIT_1	LABEL	INIT_1:	MOV	@R0,A
INIT_2	LABEL	INIT_2:	MOVX	@R0,A
INIT_3	LABEL	INIT_3:	RET
INNUM	LABEL	INNUM:
INSL_1	LABEL	INSL_1:	MOV	A,@PNTR_L
INSRT	LABEL	INSRT:
INSR_1	LABEL	INSR_1:	MOV	R1,L_CURS
INSR_2	LABEL	INSR_2:	INC	R1
INSR_4	LABEL	INSR_4:	CLR	RUNMOD
INSR_L	LABEL	INSR_L:
INTROM	LABEL	INTROM:				;Start of ROM program buffer.
INUM_0	LABEL	INUM_0:	CALL	C_IN
INUM_1	LABEL	INUM_1:	CALL	C_IN		;Get additional characters.
INUM_2	LABEL	INUM_2:	CALL	STROUT
INUM_3	LABEL	INUM_3:	CJNE	A,#'+',INUM_4
INUM_4	LABEL	INUM_4:	CJNE	A,#'-',INUM_5
INUM_5	LABEL	INUM_5:	CALL	CREATE		;Create value on stack if legal decimal digit.
INUM_6	LABEL	INUM_6:	CALL	APPEND		;Incorporate into stack entry.
IOR	LABEL	IOR:
ISUB	LABEL	ISUB:	ACALL	POP_TOS
IXOR	LABEL	IXOR:
KILL_2	LABEL	KILL_2:	CALL	READ_CHAR	;Copy down first label byte.
KILL_3	LABEL	KILL_3:	CALL	READ_CHAR	;Transfer text character.
KILL_9	LABEL	KILL_9:	RET			;Full line now deleted.
KILL_L	LABEL	KILL_L:
LABL_H	LABEL	LABL_H:	DS	1		;  "       "       "     high byte.
LABL_L	LABEL	LABL_L:	DS	1		;BASIC program source line counter.
LF	EQU	LF	EQU	0AH		;  "    "    "  <LINE FEED>.
LINIT_	MACRO	LINIT_  MACRO
LINI_1	LABEL	LINI_1:	SETB	C
LIT	LABEL	LIT:	POP	DPH		;Get parameter address.
LIT_	MACRO	LIT_    MACRO   K
LIT_1	LABEL	LIT_1:	MOV	@R1,A		;Store literal.
LNDONE	LABEL	LNDONE:	CALL	READ_CHAR
LOAD_PNTR	LABEL	LOAD_PNTR:
LOOP	LABEL	LOOP:
LOOP_0	LABEL	LOOP_0:	MOV	A,@R1
LOOP_1	LABEL	LOOP_1:	POP	ACC
LOOP_2	LABEL	LOOP_2:	SUBB	A,TMP1
LP_CNT	EQU	LP_CNT	EQU	R5
LST	LABEL	LST:	SETB	RUNMOD
LSTLIN	LABEL	LSTLIN:
LSTL_1	LABEL	LSTL_1:	RET
LSTL_2	LABEL	LSTL_2:	CALL	READ_CHAR
LSTRET	LABEL	LSTRET:	CLR	RUNMOD
LST_1	LABEL	LST_1:	CALL	CNTRL
L_CURS	LABEL	L_CURS:	DS	1		;Cursor for line buffer.
L_INIT	LABEL	L_INIT:
MLCALL	LABEL	MLCALL:	MOV	R1,AESP
MLCALL_	MACRO	MLCALL_ MACRO
MODE	LABEL	MODE:	DS	1		;Operating mode bits.
MSKTBL:	DB	MSKTBL:	DB	00000001B
MSK_PC	LABEL	MSK_PC:
MUL_16	LABEL	MUL_16:
NEG	LABEL	NEG:
NEG_0	LABEL	NEG_0:	MOV	R1,AESP		;Compute variable address.
NEG_IF_NEG	LABEL	NEG_IF_NEG:
NEXT_LOOP_	MACRO	NEXT_LOOP_       MACRO   LBL
NIBOUT	LABEL	NIBOUT:	ANL	A,#0FH		;Mask out low-order bits.
NIBO_1	LABEL	NIBO_1:	MOVC	A,@A+PC		;Look up corresponding code.
NIBO_2	LABEL	NIBO_2:	CLR	ZERSUP		;Mark that non-zero character encountered.
NIBO_3	LABEL	NIBO_3:	RET
NLINE	LABEL	NLINE:
NL_NXT	LABEL	NL_NXT:
NOTSYM	LABEL	NOTSYM:	CLR	C		;Indicate that condition tested wasn't true.
NOTVAR	LABEL	NOTVAR:	CALL	LOAD_PNTR
NO_SFR	EQU	NO_SFR	EQU	$-SFRTBL
NO_VAR	EQU	NO_VAR	EQU	12		;Allow 12 internal variables A - L.
NXT	LABEL	NXT:
NXT_1	LABEL	NXT_1:	JMP	STMT
OPEN_1	LABEL	OPEN_1:	CALL	GET_BUF		;Move back next character.
OPEN_2	LABEL	OPEN_2:
OPEN_3	LABEL	OPEN_3:	CALL	READ_CHAR	;Test first label byte of following line.
OPEN_4	LABEL	OPEN_4:	MOV	A,STRLEN	;Number of bytes needed for BASIC text.
OPEN_5	LABEL	OPEN_5:	CALL	READ_CHAR
OPEN_6	LABEL	OPEN_6:	DEC	DEST_L
OPEN_L	LABEL	OPEN_L:
OV_TST	LABEL	OV_TST:
PNTR_H	EQU	PNTR_H	EQU	R2		;High-order pointer byte (temp. cursor)
PNTR_L	EQU	PNTR_L	EQU	R0		;Program buffer pointer.
POP_ACC	LABEL	POP_ACC:
POP_TOS	LABEL	POP_TOS:
PRN	LABEL	PRN:
PRNHEX	LABEL	PRNHEX:	CALL	NIBOUT
PRNH_1	LABEL	PRNH_1:	MOV	A,TOS_L		;Read into Acc.
PRNRET	LABEL	PRNRET:	RET
PRNTOS	LABEL	PRNTOS:	SETB	ZERSUP		;Set zero suppression flag.
PRN_1	LABEL	PRN_1:	XCH	A,TOS_L
PUSH_C	LABEL	PUSH_C:	CLR	A
PUSH_TOS	LABEL	PUSH_TOS:
PUTROM	LABEL	PUTROM:	JMP	EXP_ER
PUT_BUF	LABEL	PUT_BUF:
RAMLIM	EQU	RAMLIM	EQU	3000H		;Allowance made for 4K RAM buffer.
RAM_INIT	LABEL	RAM_INIT:
RDCHDN	LABEL	RDCHDN:	RET
READ_CHAR	LABEL	READ_CHAR:
READ_LABEL	LABEL	READ_LABEL:
RELOP	LABEL	RELOP:
REL_6	LABEL	REL_6:	CLR	C
REREAD	LABEL	REREAD:	MOV	A,CHAR
REWIND	LABEL	REWIND:	CLR	CHAR_FLG
REWROM	LABEL	REWROM:	JB	EXTMOD,RWXROM
RND	LABEL	RND:
ROM2	LABEL	ROM2:                         ;Start of ROM program buffer.
RSTR	LABEL	RSTR:
RUNROM	LABEL	RUNROM:	SETB	EXTMOD
RWXROM	LABEL	RWXROM: MOV     PNTR_H,#HIGH(rom2)
S10	LABEL	S10:    TSTS_   S10B
S10D	LABEL	S10D:   IJMP_   SYN_NG
S11	LABEL	S11:    CALL    DONE
S14B	LABEL	S14B:   CALL    LST
S20	LABEL	S20:    IJMP_   CMD_NG
S3C	LABEL	S3C:    IFDONE_ S6A
S6	LABEL	S6:     CALL    DONE
S6A	LABEL	S6A:    JMP     NXT
S6B	LABEL	S6B:    JMP     NL_NXT
S8A	LABEL	S8A:    COND_   S8B
S8B	LABEL	S8B:    CALL    SKPTXT
SAV	LABEL	SAV:
SAVE_PNTR	LABEL	SAVE_PNTR:
SEED_H	LABEL	SEED_H:	DS	1
SEED_L	LABEL	SEED_L:	DS	1
SEQ_FETCH	LABEL	SEQ_FETCH:
SEQ_STORE	LABEL	SEQ_STORE:
SETRBI	LABEL	SETRBI:	MOV	A,B
SFID_1	LABEL	SFID_1:	MOV	A,LP_CNT
SFID_2	LABEL	SFID_2:	INC	LP_CNT
SFRTBL:	DB	SFRTBL:	DB	80H
SFR_ID	LABEL	SFR_ID:
SKPLIN	LABEL	SKPLIN:	CALL	READ_CHAR
SKPTXT	LABEL	SKPTXT:	CALL	READ_CHAR
SPC	LABEL	SPC:
SPLIT_DBA	LABEL	SPLIT_DBA:
SPLSFR	LABEL	SPLSFR:	MOV	R1,A
SP_BASE	EQU	SP_BASE	EQU	$-1		;Initialization value for hardware SP.
SP_INI	LABEL	SP_INI:	JNB	RXD,RUNROM
START	LABEL	START:
STK_ER	LABEL	STK_ER:	CALL	AES_ER
STMT	LABEL	STMT:   LINIT_                          ;Initialize for line execution.
STORE	LABEL	STORE:
STOR_0	LABEL	STOR_0:	CALL	POP_TOS
STOR_1	LABEL	STOR_1:	MOV	DPTR,#STRJTB
STRCBY	LABEL	STRCBY:	MOV	P2,TOS_H
STRDBY	LABEL	STRDBY:	MOV	A,TOS_L		;Load acc. with low-order dest. addr.
STRDIR	LABEL	STRDIR:
STREXT	LABEL	STREXT:	MOV	R1,A
STRJTB:	DB	STRJTB:	DB	STRVAR-STRJTB
STRLEN	LABEL	STRLEN:	DS	1		;Length of text string in L_BUF.
STROUT	LABEL	STROUT:	POP	DPH		;Access in-line string.
STRO_1	LABEL	STRO_1:	CLR	A
STRO_2	LABEL	STRO_2:	CALL	C_OUT		;Output character.
STRRBI	LABEL	STRRBI:	CALL	SPLIT_DBA
STRSFR	LABEL	STRSFR:	CALL	SFR_ID
STRTBL	LABEL	STRTBL:	MOV	80H,TOS_L
STRVAR	LABEL	STRVAR:	MOV	A,TOS_L
STRXBY	LABEL	STRXBY:
SYN_ER	LABEL	SYN_ER:	CALL	STROUT		;Output error message.
SYN_NG	LABEL	SYN_NG: IJMP_   CMD_NG
S_INIT	LABEL	S_INIT:	CLR	A
TABCNT	LABEL	TABCNT:	DS	1		;Column formatting count.
TABSIZ	EQU	TABSIZ	EQU	8		;Formatted column spacing.
TERM	LABEL	TERM:   ICALL_  FACT
TERM_4	LABEL	TERM_4: RET
TMP0	LABEL	TMP0:	DS	1
TMP1	LABEL	TMP1:	DS	1
TMP2	LABEL	TMP2:	DS	1
TMP3	LABEL	TMP3:	DS	1
TMP4	LABEL	TMP4:	DS	1
TOKEN	LABEL	TOKEN:	CALL	CNTRL
TOS_H	EQU	TOS_H	EQU	R7		;Variable popped from stack for math routines.
TOS_L	EQU	TOS_L	EQU	R6
TST	LABEL	TST:
TSTL_	MACRO	TSTL_   MACRO   LBL
TSTN	LABEL	TSTN:	CALL	READ_CHAR
TSTN_	MACRO	TSTN_   MACRO   LBL
TSTN_1	LABEL	TSTN_1:	CALL	READ_CHAR	;Move over matched character.
TSTS	LABEL	TSTS:	CALL	READ_CHAR
TSTS_	MACRO	TSTS_   MACRO   LBL
TSTS_1	LABEL	TSTS_1:	CALL	READ_CHAR	;Read next string character.
TSTS_2	LABEL	TSTS_2:	CALL	C_OUT		;Call output routine.
TSTV	LABEL	TSTV:
TSTV_	MACRO	TSTV_   MACRO   LBL
TSTV_1	LABEL	TSTV_1:	LIT_	0
TST_1	LABEL	TST_1:	CLR	A
TST_2	LABEL	TST_2:	CLR	A		;Fetch template characters until end of string
T_BAD	LABEL	T_BAD:	CLR	A
T_GOOD	LABEL	T_GOOD:	CALL	D_BLNK
US_VAR	LABEL	US_VAR:	DS	2*NO_VAR	;Allocate variable storage space.
VAR	LABEL	VAR:    TSTV_   VAR_0
VAR_0	LABEL	VAR_0:  TSTN_   VAR_1
VERS	EQU	VERS    EQU     01H
WRCH_1	LABEL	WRCH_1:	RET
WRITE_CHAR	LABEL	WRITE_CHAR:
XEC	LABEL	XEC:    CALL    XINIT                   ;Initialize for sequential execution.
XFER	LABEL	XFER:	CALL	FNDLBL
XFERNG	LABEL	XFERNG:	JMP	EXP_ER
XINIT	LABEL	XINIT:	MOV	AESP,#AES-1	;Initialize AE Stack.
XRAD_1	LABEL	XRAD_1:	PUSH	B		;Save for re-use.
big_problem	LABEL	big_problem:				   ; tos=8000h will generate an overflow
e1	LABEL	e1:     call   tst
e2	LABEL	e2:     call   tst
e3	LABEL	e3:     call   tst
e4	LABEL	e4:     call   tst
fact	LABEL	fact:   call   tst
fact_1	LABEL	fact_1: call   tst
no_problem	LABEL	no_problem:
rel_1	LABEL	rel_1:  call   tst
rel_2	LABEL	rel_2:  call   tst
rel_3	LABEL	rel_3:  call   tst
rel_4	LABEL	rel_4:  call   tst
rel_5	LABEL	rel_5:  call   tst
s10b	LABEL	s10b:   call   tst
s10c	LABEL	s10c:   call   tst
s12	LABEL	s12:    call   tst
s13	LABEL	s13:    call   tst
s13a	LABEL	s13a:   call   tst
s13b	LABEL	s13b:   call   tst
s13c	LABEL	s13c:   call   tst
s14	LABEL	s14:    call   tst
s15	LABEL	s15:    call   tst
s16	LABEL	s16:    call   tst
s16a	LABEL	s16a:   call   tst
s17	LABEL	s17:    call   tst
s17a	LABEL	s17a:   call   tst
s17b	LABEL	s17b:   call   tst
s17c	LABEL	s17c:   call   tst
s18	LABEL	s18:    call   tst
s19	LABEL	s19:    call   tst
s2	LABEL	s2:     call   tst
s3	LABEL	s3:     call   tst
s3a	LABEL	s3a:    call   tst
s3b	LABEL	s3b:    call   tst
s5	LABEL	s5:     call   tst
s5a	LABEL	s5a:    call   tst
s7	LABEL	s7:     call   tst
s8	LABEL	s8:     call   tst
s9	LABEL	s9:     call   tst
term_0	LABEL	term_0: call   tst
term_1	LABEL	term_1: call   tst
term_2	LABEL	term_2: call   tst
term_3	LABEL	term_3: call   tst
tstcby	LABEL	tstcby: call   tst
tstrbi	LABEL	tstrbi: call   tst
tstxby	LABEL	tstxby: call   tst
var_1	LABEL	var_1:  call   tst
var_1a	LABEL	var_1a: call   tst
var_2	LABEL	var_2:  call   tst